buildscript {
    ext {
    }
}

plugins {
    id 'org.springframework.boot' version "3.1.3"
    id 'io.spring.dependency-management' version '1.1.0' // provides maven-like dependency management for gradle
    id 'application'
    id 'jacoco'
    id 'java'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

springBoot {
    buildInfo()
}

group = 'org.project.donuts'
version = '0.1.0'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.zonky.test.postgres:embedded-postgres-binaries-bom:15.2.0'
    }
}

dependencies {
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.postgresql:postgresql'

    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    //implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // others
    implementation 'org.pgpainless:pgpainless-core:1.4.4'
    implementation 'software.amazon.awssdk:s3:2.20.52'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-cache:3.2.2'


    // test libraries
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.awaitility:awaitility:3.0.0'
    // testImplementation 'io.mockk:mockk:1.12.0' only for kotlin

    // test database
    testImplementation 'io.zonky.test:embedded-postgres:2.0.3'
    testImplementation 'io.zonky.test:embedded-database-spring-test:2.2.0'

    // testcontainers libraries
    implementation 'org.testcontainers:testcontainers-bom:1.18.0'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:localstack:1.19.0'

}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.3
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
}


import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test).configureEach {
    testLogging {
        events (TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STANDARD_ERROR)
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        info.events = testLogging.events
        info.exceptionFormat = testLogging.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests," +
                        " ${result.successfulTestCount} passed," +
                        " ${result.failedTestCount} failed," +
                        " ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}